version: "3"

env:
  CLUSTER_NAME: local
  KIND_CLUSTER_NAME: kind-{{.CLUSTER_NAME}}
  KUBERNETES_VERSION: v1.33.0
  METALLB_VERSION: v0.15.2
  CILIUM_VERSION: v1.17.5
  SHELL: /usr/bin/env bash

tasks:
  use_context:
    desc: Switch kubectl context to the appropriate cluster
    cmds:
      - |
        if kubectl config current-context | grep -q minikube; then
          echo "Current context is minikube. No need to change the context."
        else
          if kubectl config current-context | grep -q {{.KIND_CLUSTER_NAME}}; then
            echo "Current context is already set to kind."
          else
            echo "Setting context to kind."
            kubectl config use-context {{.KIND_CLUSTER_NAME}}
          fi
        fi
    silent: true

  cluster:create:
    desc: Create a kind cluster and initialize it
    cmds:
      - echo "Creating cluster {{.CLUSTER_NAME}} with Kubernetes version {{.KUBERNETES_VERSION}}"
      - bash ./scripts/kind-cluster.sh
      - task: cluster:init

  cluster:remove:
    desc: Delete the kind cluster
    cmds:
      - kind delete cluster -n {{.CLUSTER_NAME}}

  cluster:init:
    desc: Initialize cluster with namespaces and load balancer
    deps: [use_context]
    cmds:
      - echo "Initializing cluster"
      - kubectl create namespace test
      - kubectl create namespace monitoring
      - kubectl create namespace ops
      - bash ./scripts/lb.sh

  cilium:
    desc: Install Cilium CNI with Helm
    deps: [use_context]
    cmds:
      - helm repo add cilium https://helm.cilium.io/
      - helm repo update
      - |
        helm install cilium cilium/cilium --version {{.CILIUM_VERSION}} \
          --namespace kube-system \
          --set prometheus.enabled=true --set envoy.enabled=true \
          --set operator.prometheus.enabled=true \
          --set hubble.enabled=true \
          --set hubble.metrics.enableOpenMetrics=true \
          --set hubble.relay.enabled=true \
          --set hubble.ui.enabled=true \
          --set hubble.metrics.enabled="{dns,drop,tcp,flow,port-distribution,icmp,httpV2:exemplars=true;labelsContext=source_ip\,source_namespace\,source_workload\,destination_ip\,destination_namespace\,destination_workload\,traffic_direction}"
      - kubectl -n kube-system delete daemonset kindnet || true
      - kubectl -n kube-system delete daemonset kube-proxy || true

  ingress-nginx:
    desc: Install ingress-nginx with Helm
    deps: [use_context]
    cmds:
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update
      - helm install ingress-nginx --namespace ingress --create-namespace ingress-nginx/ingress-nginx

  helm:
    desc: Manage Helm charts using Helmfile
    dir: ./manifest/helm
    deps: [use_context]
    silent: true
    cmds:
      - |
        (command -v helmfile > /dev/null 2>&1) || (echo "helmfile not found. Please install it: https://helmfile.readthedocs.io/en/latest/install/" && exit 1)
        (command -v helm > /dev/null 2>&1) || (echo "helm not found. Please install it: https://helm.sh/docs/intro/install/" && exit 1)
        (command -v yq > /dev/null 2>&1) || (echo "yq not found. Please install it: https://github.com/mikefarah/yq#install" && exit 1)
        (helm plugin list | grep -q "diff") || helm plugin install https://github.com/databus23/helm-diff
        case "{{.CLI_ARGS}}" in
          ls)
            echo -e "\nAvailable charts:" && \
            yq '.releases[].name' helmfile.yaml | sed 's/^/  /'
            ;;
          all)
            echo "Deploying all Helm charts..."
            helmfile apply
            ;;
          "")
            echo "Usage: task helm -- ls | all | <chart-name>"
            ;;
          *)
            echo "Deploying specific chart: {{.CLI_ARGS}}"
            helmfile apply --selector name={{.CLI_ARGS}}
            ;;
        esac
